typedef long long ll;
class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        vector<ll> parent(n), compSize(n, 0);
        auto make = [&](ll a) {
            parent[a] = a;
            compSize[a] = 1;
        };
        for (int i = 0; i < n; i++) {
            make(i);
        }
        

        function<ll(ll)> find = [&](ll node) -> ll {
            if (parent[node] == node)
                return node;
            return parent[node] = find(parent[node]);
        };
        
      
        function<void(ll,ll)> Union = [&](ll a, ll b) {
            a = find(a);
            b = find(b);
            if(a == b) return;
            if(compSize[a] < compSize[b])
                swap(a, b);
            parent[b] = a;
            compSize[a] += compSize[b];
        };
        
        
        for (int i = 0; i < n; i++){
            for (int j = i + 1; j < n; j++){
                if (graph[i][j] == 1) {
                    Union(i, j);
                }
            }
        }
        
   
        vector<int> infectedCount(n, 0);
        for (int node : initial) {
            int root = find(node);
            infectedCount[root]++;
        }
        
     
        sort(initial.begin(), initial.end());
        
        int ans = -1;
        int maxSaved = -1;
     
        for (int node : initial) {
            int root = find(node);
          
            if (infectedCount[root] == 1) {
                if (compSize[root] > maxSaved) {
                    maxSaved = compSize[root];
                    ans = node;
                }
            }
        }
        
        return ans == -1 ? initial[0] : ans;
    }
};
